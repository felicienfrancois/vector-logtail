
# Forwarding logs to Logtail.com
# ------------------------------
# Generated on 2022-11-28: https://logtail.com/vector-toml/docker/${LOGTAIL_SOURCE_TOKEN}
# Learn more about Vector configuration: https://vector.dev/docs/reference/configuration/

# - Docker: v1

[sources.logtail_docker_logs_${LOGTAIL_SOURCE_TOKEN}]
type = "docker_logs"

# Added by felicienfrancois: multiline rules
  [sources.logtail_docker_logs_${LOGTAIL_SOURCE_TOKEN}.multiline]
    start_pattern = "^[^\\s]"
    mode = "continue_through"
    condition_pattern = "^([\\s]+|Caused by)"
    timeout_ms = 3000
# End of addition

[transforms.logtail_docker_parser_${LOGTAIL_SOURCE_TOKEN}]
type = "remap"
inputs = ["logtail_docker_logs_${LOGTAIL_SOURCE_TOKEN}"]
source = '''
del(.source_type)
.dt = del(.timestamp)
.docker = del(.)
.dt = del(.docker.dt)
.message = del(.docker.message)
.platform = "Docker"

.http = parse_regex(.message, r'^\s*(-|(?P<client>\S+))\s+(-|(?P<identity>\S+))\s+(-|(?P<user>\S+))\s+\[(?P<timestamp>[^\]]+)\]\s+"(?P<request>(?P<method>\w+)\s+(?P<path>\S+)\s+(?P<protocol>\S+))"\s+(?P<status>\d+)\s+(-|(?P<size>\d+))\s+"(-|(?P<referrer>[^"]+))"\s+"(-|(?P<agent>[^"]+))"(\s+\d+\s+"(-|(?P<server>[^"]+))"\s+"[^"]+")?(\s+(?P<duration>\d+\.\d{3}))?(\s+(?P<durationms>\d+)ms)?(\s+"?(-|(?P<extra>[^"]+))"?)?$') ??
    parse_regex(.message, r'^\s*(?P<timestamp>.+)\s+\[(?P<severity>\w+)\]\s+(?P<pid>\d+)\#(?P<tid>\d+):\s+\*(?P<cid>\d+)\s+(?P<message>.*)(?:,\s+client:\s+(?P<client>[^,z]+))(?:,\s+server:\s+(?P<server>[^,z]+))(?:,\s+request:\s+"(?P<request>[^"]+)")(?:,\s+subrequest:\s+"(?P<subrequest>[^"]+)")?(?:,\s+upstream:\s+"(?P<upstream>[^"]+)")?(?:,\s+host:\s+"(?P<host>[^"]+)")(?:,\s+referrer:\s+"(?P<referrer>[^"]+)")?\s*') ??
    parse_nginx_log(.message, format: "combined") ??
    parse_nginx_log(.message, format: "error") ??
    {}

if .http != {} {
  .platform = "HTTP"
  .level = del(.http.severity)
  .message = del(.http.message)

  if is_null(.message) { del(.message) }
  if exists(.http.timestamp) {
    .dt = format_timestamp!(
      parse_timestamp(.http.timestamp, "%d/%b/%Y:%T %z") ??
        parse_timestamp(.http.timestamp, "%Y/%m/%d %T") ??
        .dt,
      "%+"
    )

    del(.http.timestamp)
  }

  if is_string(.http.duration) {
    .http.responsetime = 1000 * (to_float(.http.duration) ?? -0.001)
    del(.http.duration)
}
  if is_string(.http.durationms) {
    .http.responsetime = to_float(.http.durationms) ?? -1
    del(.http.durationms)
}

  if is_string(.http.status) { .http.status = to_int(.http.status) ?? .http.status }
  if is_string(.http.size) { .http.size = to_int(.http.size) ?? -1 }
  if is_null(.http.referrer) { del(.http.referrer) }
  if is_null(.http.identity) { del(.http.identity) }
  if is_null(.http.responsetime) { del(.http.responsetime) }
  if is_string(.http.cid) { .http.cid = to_int(.http.cid) ?? .http.cid }
  if is_string(.http.pid) { .http.pid = to_int(.http.pid) ?? .http.pid }
  if is_string(.http.tid) { .http.tid = to_int(.http.tid) ?? .http.tid }
  if is_null(.http.subrequest) { del(.http.subrequest) }
  if is_null(.http.upstream) { del(.http.upstream) }
} else {
  del(.http)
}


.mysql = parse_regex(.message, r'^(?P<dt>\d+-\d+-\d+T\d+:\d+:\d+\.\d+\w+)\s+(?P<thread>\d+)\s+\[(?P<priority>\S+)\]\s*\[(?P<error_code>\S+)\]\s*\[(?P<subsystem>\S+)\]\s*(?P<message>.*)') ??
    parse_regex(.message, r'^(?P<dt>\d+-\d+-\d+T\d+:\d+:\d+\.\d+\w+)\s*(?P<id>\d+)\s*(?P<command>[^\t]+)\s*(?P<message>.*)?') ??
    {}

if .mysql != {} {
  .platform = "MySQL"
  if exists(.mysql.dt) { .dt = del(.mysql.dt) }
  if exists(.mysql.thread) { .mysql.thread = to_int!(.mysql.thread) }
  if exists(.mysql.id) { .mysql.id = to_int!(.mysql.id) }
  .message = del(.mysql.message)

  # extract message metadata
  tmp = to_string(.message)
  
  ips = parse_regex_all!(tmp, r'\b(?P<ip>(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\b')
  if exists(ips[0].ip) { .message_metadata.ipv4_1 = ips[0].ip; tmp = replace(tmp, string!(ips[0].ip), "") }
  if exists(ips[1].ip) { .message_metadata.ipv4_2 = ips[1].ip; tmp = replace(tmp, string!(ips[1].ip), "") }
  if exists(ips[2].ip) { .message_metadata.ipv4_3 = ips[2].ip; tmp = replace(tmp, string!(ips[2].ip), "") }
  if exists(ips[3].ip) { .message_metadata.ipv4_4 = ips[3].ip; tmp = replace(tmp, string!(ips[3].ip), "") }
  if exists(ips[4].ip) { .message_metadata.ipv4_5 = ips[4].ip; tmp = replace(tmp, string!(ips[4].ip), "") }
  
  # we match only full IPv6 addresses
  ipv6s = parse_regex_all!(tmp, r'\b(?P<ip>(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4})\b')
  if exists(ipv6s[0].ip) { .message_metadata.ipv6_1 = ipv6s[0].ip; tmp = replace(tmp, string!(ipv6s[0].ip), "") }
  if exists(ipv6s[1].ip) { .message_metadata.ipv6_2 = ipv6s[1].ip; tmp = replace(tmp, string!(ipv6s[1].ip), "") }
  if exists(ipv6s[2].ip) { .message_metadata.ipv6_3 = ipv6s[2].ip; tmp = replace(tmp, string!(ipv6s[2].ip), "") }
  if exists(ipv6s[3].ip) { .message_metadata.ipv6_4 = ipv6s[3].ip; tmp = replace(tmp, string!(ipv6s[3].ip), "") }
  if exists(ipv6s[4].ip) { .message_metadata.ipv6_5 = ipv6s[4].ip; tmp = replace(tmp, string!(ipv6s[4].ip), "") }
  
  numbers = parse_regex_all!(tmp, r'(?P<num>\b\d+(?:\.\d+)?\b)')
  if exists(numbers[0].num) { .message_metadata.param1 = to_int(numbers[0].num) ?? to_float(numbers[0].num) ?? null }
  if exists(numbers[1].num) { .message_metadata.param2 = to_int(numbers[1].num) ?? to_float(numbers[1].num) ?? null }
  if exists(numbers[2].num) { .message_metadata.param3 = to_int(numbers[2].num) ?? to_float(numbers[2].num) ?? null }
  if exists(numbers[3].num) { .message_metadata.param4 = to_int(numbers[3].num) ?? to_float(numbers[3].num) ?? null }
  if exists(numbers[4].num) { .message_metadata.param5 = to_int(numbers[4].num) ?? to_float(numbers[4].num) ?? null }
  if exists(numbers[5].num) { .message_metadata.param6 = to_int(numbers[5].num) ?? to_float(numbers[5].num) ?? null }
  if exists(numbers[6].num) { .message_metadata.param7 = to_int(numbers[6].num) ?? to_float(numbers[6].num) ?? null }
  if exists(numbers[7].num) { .message_metadata.param8 = to_int(numbers[7].num) ?? to_float(numbers[7].num) ?? null }
  if exists(numbers[8].num) { .message_metadata.param9 = to_int(numbers[8].num) ?? to_float(numbers[8].num) ?? null }
  if exists(numbers[9].num) { .message_metadata.param10 = to_int(numbers[9].num) ?? to_float(numbers[9].num) ?? null }

} else {
  del(.mysql)
}

.json = object!(parse_json(.message) ?? {})

if .json != {} && (exists(.json.level) || exists(.json.http) || exists(.json.timestamp) || exists(.json.msg) || exists(.json.message)) {
  del(.message)
  .dt = del(.json.timestamp)
  .level = del(.json.level)
  .reqId = del(.json.reqId)
  .sid = del(.json.sid)
  .http = del(.json.http)
  if exists(.json.msg) { .message = del(.json.msg) }
  if exists(.json.message) { .message = del(.json.message) }
  del(.json)
}

'''

[sinks.logtail_http_sink_${LOGTAIL_SOURCE_TOKEN}]
type = "http"
uri = "${LOGTAIL_SERVER_URL}"
encoding.codec = "json"
auth.strategy = "bearer"
auth.token = "${LOGTAIL_SOURCE_TOKEN}"
inputs = ["logtail_docker_parser_${LOGTAIL_SOURCE_TOKEN}"]

# --- end of 2022-11-28: https://logtail.com/vector-toml/docker/${LOGTAIL_SOURCE_TOKEN}

